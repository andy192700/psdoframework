name: Build
on:
  workflow_dispatch:

jobs:
  windowsbuild:
    name: "Windows Build"
    runs-on: windows-latest

    steps:
    - name: Checkout code
      id: checkout
      uses: actions/checkout@v2

    - name: Set up .NET 8 SDK
      id: dotnet_install
      if: steps.checkout.conclusion == 'success'
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Echo PS Version
      id: echo_psversion
      if: steps.dotnet_install.conclusion == 'success'
      run: |
        make echopsversion

    - name: Validate makefile
      id: validate_make
      if: steps.echo_psversion.conclusion == 'success'
      run: |
        make validate

    - name: dotnet build
      id: dotnet_build
      if: steps.validate_make.conclusion == 'success'
      run: |
        make dotnetbuild

    - name: dotnet test
      id: dotnet_test
      if: steps.dotnet_build.conclusion == 'success'
      run: |
        make dotnettest

    - name: build module manifest
      id: manifest_build
      if: steps.dotnet_test.conclusion == 'success'
      run: |
        make createmanifest

    - name: run powershell tests
      id: ps_tests
      if: steps.manifest_build.conclusion == 'success'
      run: |
        make pstests

  macosbuild:
    name: "MacOS Build"
    needs: windowsbuild
    if: success()
    runs-on: macos-latest

    steps:
    - name: Checkout code
      id: checkout
      uses: actions/checkout@v2

    - name: Set up .NET 8 SDK
      id: dotnet_install
      if: steps.checkout.conclusion == 'success'
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Echo PS Version
      id: echo_psversion
      if: steps.dotnet_install.conclusion == 'success'
      run: |
        make echopsversion

    - name: Validate makefile
      id: validate_make
      if: steps.echo_psversion.conclusion == 'success'
      run: |
        make validate

    - name: dotnet build
      id: dotnet_build
      if: steps.validate_make.conclusion == 'success'
      run: |
        make dotnetbuild

    - name: dotnet test
      id: dotnet_test
      if: steps.dotnet_build.conclusion == 'success'
      run: |
        make dotnettest

    - name: build module manifest
      id: manifest_build
      if: steps.dotnet_test.conclusion == 'success'
      run: |
        make createmanifest

    - name: run powershell tests
      id: ps_tests
      if: steps.manifest_build.conclusion == 'success'
      run: |
        make pstests

  linuxbuild:
    name: "Linux Build & Publish"
    needs: macosbuild
    if: success()
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      id: checkout
      uses: actions/checkout@v2

    - name: Set up .NET 8 SDK
      id: dotnet_install
      if: steps.checkout.conclusion == 'success'
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 8.0.x

    - name: Echo PS Version
      id: echo_psversion
      if: steps.dotnet_install.conclusion == 'success'
      run: |
        make echopsversion

    - name: Validate makefile
      id: validate_make
      if: steps.echo_psversion.conclusion == 'success'
      run: |
        make validate

    - name: dotnet build
      id: dotnet_build
      if: steps.validate_make.conclusion == 'success'
      run: |
        make dotnetbuild

    - name: dotnet test
      id: dotnet_test
      if: steps.dotnet_build.conclusion == 'success'
      run: |
        make dotnettest

    - name: build module manifest
      id: manifest_build
      if: steps.dotnet_test.conclusion == 'success'
      run: |
        make createmanifest psNuGetSourceName=PSGallery

    - name: run powershell tests
      id: ps_tests
      if: steps.manifest_build.conclusion == 'success'
      run: |
        make pstests

    - name: publish module
      id: publish_module
      if: ${{ steps.ps_tests.conclusion == 'success' }}
      run: |
        make publishmodule psNuGetSourceName=PSGallery psNuGetApiKey=${{ secrets.PSGALLERY_KEY }}

    - name: publish dotnet tool
      id: publish_dotnet_tool
      if: ${{ steps.publish_module.conclusion == 'success' }}
      run: |
        make dotnetpublish psNuGetSourceName="https://api.nuget.org/v3/index.json" psNuGetApiKey=${{ secrets.NUGETGALLERY_KEY }}

  windowsinstall:
    name: "Windows Install & Test"
    needs: linuxbuild
    if: ${{ success() }}
    runs-on: windows-latest

    steps:
    - name: Checkout code
      id: checkout
      uses: actions/checkout@v2

    - name: install module
      id: install_module
      if: steps.checkout.conclusion == 'success'
      run: |
        make installmodule psNuGetSourceName="https://api.nuget.org/v3/index.json"

    - name: run powershell tests
      id: ps_tests_install
      if: steps.install_module.conclusion == 'success'
      run: |
        make pstestspostinstall psNuGetSourceName=PSGallery

  macosinstall:
    name: "MacOS Install & Test"
    needs: windowsinstall
    if: ${{ success() }}
    runs-on: macos-latest

    steps:
    - name: Checkout code
      id: checkout
      uses: actions/checkout@v2

    - name: install module
      id: install_module
      if: steps.checkout.conclusion == 'success'
      run: |
        make installmodule psNuGetSourceName="https://api.nuget.org/v3/index.json"

    - name: run powershell tests
      id: ps_tests_install
      if: steps.install_module.conclusion == 'success'
      run: |
        make pstestspostinstall psNuGetSourceName=PSGallery

  linuxinstall:
    name: "Linux Install & Test"
    needs: macosinstall
    if: ${{ success() }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      id: checkout
      uses: actions/checkout@v2

    - name: install module
      id: install_module
      if: steps.checkout.conclusion == 'success'
      run: |
        make installmodule psNuGetSourceName="https://api.nuget.org/v3/index.json"

    - name: run powershell tests
      id: ps_tests_install
      if: steps.install_module.conclusion == 'success'
      run: |
        make pstestspostinstall psNuGetSourceName=PSGallery

  tag_release:
    name: "Tag Release"
    needs: linuxinstall
    if: ${{ success() }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create Git Tag
      id: create_tag
      run: |
        make gitrelease
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}